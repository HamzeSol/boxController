
AVRASM ver. 2.1.30  D:\projects\tentController\sw\m32test\Release\List\m32prj.asm Wed Nov 15 16:55:14 2023

D:\projects\tentController\sw\m32test\Release\List\m32prj.asm(1417): warning: Register r5 already defined by the .DEF directive
D:\projects\tentController\sw\m32test\Release\List\m32prj.asm(1418): warning: Register r4 already defined by the .DEF directive
D:\projects\tentController\sw\m32test\Release\List\m32prj.asm(1419): warning: Register r7 already defined by the .DEF directive
D:\projects\tentController\sw\m32test\Release\List\m32prj.asm(1420): warning: Register r6 already defined by the .DEF directive
D:\projects\tentController\sw\m32test\Release\List\m32prj.asm(1421): warning: Register r9 already defined by the .DEF directive
D:\projects\tentController\sw\m32test\Release\List\m32prj.asm(1422): warning: Register r10 already defined by the .DEF directive
D:\projects\tentController\sw\m32test\Release\List\m32prj.asm(1423): warning: Register r11 already defined by the .DEF directive
D:\projects\tentController\sw\m32test\Release\List\m32prj.asm(1424): warning: Register r8 already defined by the .DEF directive
D:\projects\tentController\sw\m32test\Release\List\m32prj.asm(1425): warning: Register r13 already defined by the .DEF directive
D:\projects\tentController\sw\m32test\Release\List\m32prj.asm(1426): warning: Register r12 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V4.00 Evaluation
                 ;(C) Copyright 1998-2023 Pavel Haiduc, HP InfoTech S.R.L.
                 ;http://www.hpinfotech.ro
                 
                 ;Build configuration    : Release
                 ;Chip type              : ATmega32A
                 ;Program type           : Application
                 ;Clock frequency        : 8.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 512 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Mode 2
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega32A
                 	#pragma AVRPART MEMORY PROG_FLASH 32768
                 	#pragma AVRPART MEMORY EEPROM 1024
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 2048
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU SPMCSR=0x37
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x085F
                 	.EQU __DSTACK_SIZE=0x0200
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.EQU __FLASH_PAGE_SIZE=0x40
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETW1P
                 	LD   R30,X+
                 	LD   R31,X
                 	SBIW R26,1
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD1P_INC
                 	LD   R30,X+
                 	LD   R31,X+
                 	LD   R22,X+
                 	LD   R23,X+
                 	.ENDM
                 
                 	.MACRO __GETD1P_DEC
                 	LD   R23,-X
                 	LD   R22,-X
                 	LD   R31,-X
                 	LD   R30,-X
                 	.ENDM
                 
                 	.MACRO __PUTDP1
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTDP1_DEC
                 	ST   -X,R23
                 	ST   -X,R22
                 	ST   -X,R31
                 	ST   -X,R30
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __CPD10
                 	SBIW R30,0
                 	SBCI R22,0
                 	SBCI R23,0
                 	.ENDM
                 
                 	.MACRO __CPD20
                 	SBIW R26,0
                 	SBCI R24,0
                 	SBCI R25,0
                 	.ENDM
                 
                 	.MACRO __ADDD12
                 	ADD  R30,R26
                 	ADC  R31,R27
                 	ADC  R22,R24
                 	ADC  R23,R25
                 	.ENDM
                 
                 	.MACRO __ADDD21
                 	ADD  R26,R30
                 	ADC  R27,R31
                 	ADC  R24,R22
                 	ADC  R25,R23
                 	.ENDM
                 
                 	.MACRO __SUBD12
                 	SUB  R30,R26
                 	SBC  R31,R27
                 	SBC  R22,R24
                 	SBC  R23,R25
                 	.ENDM
                 
                 	.MACRO __SUBD21
                 	SUB  R26,R30
                 	SBC  R27,R31
                 	SBC  R24,R22
                 	SBC  R25,R23
                 	.ENDM
                 
                 	.MACRO __ANDD12
                 	AND  R30,R26
                 	AND  R31,R27
                 	AND  R22,R24
                 	AND  R23,R25
                 	.ENDM
                 
                 	.MACRO __ORD12
                 	OR   R30,R26
                 	OR   R31,R27
                 	OR   R22,R24
                 	OR   R23,R25
                 	.ENDM
                 
                 	.MACRO __XORD12
                 	EOR  R30,R26
                 	EOR  R31,R27
                 	EOR  R22,R24
                 	EOR  R23,R25
                 	.ENDM
                 
                 	.MACRO __XORD21
                 	EOR  R26,R30
                 	EOR  R27,R31
                 	EOR  R24,R22
                 	EOR  R25,R23
                 	.ENDM
                 
                 	.MACRO __COMD1
                 	COM  R30
                 	COM  R31
                 	COM  R22
                 	COM  R23
                 	.ENDM
                 
                 	.MACRO __MULD2_2
                 	LSL  R26
                 	ROL  R27
                 	ROL  R24
                 	ROL  R25
                 	.ENDM
                 
                 	.MACRO __LSRD1
                 	LSR  R23
                 	ROR  R22
                 	ROR  R31
                 	ROR  R30
                 	.ENDM
                 
                 	.MACRO __LSLD1
                 	LSL  R30
                 	ROL  R31
                 	ROL  R22
                 	ROL  R23
                 	.ENDM
                 
                 	.MACRO __ASRB4
                 	ASR  R30
                 	ASR  R30
                 	ASR  R30
                 	ASR  R30
                 	.ENDM
                 
                 	.MACRO __ASRW8
                 	MOV  R30,R31
                 	CLR  R31
                 	SBRC R30,7
                 	SER  R31
                 	.ENDM
                 
                 	.MACRO __LSRD16
                 	MOV  R30,R22
                 	MOV  R31,R23
                 	LDI  R22,0
                 	LDI  R23,0
                 	.ENDM
                 
                 	.MACRO __LSLD16
                 	MOV  R22,R30
                 	MOV  R23,R31
                 	LDI  R30,0
                 	LDI  R31,0
                 	.ENDM
                 
                 	.MACRO __CWD1
                 	MOV  R22,R31
                 	ADD  R22,R22
                 	SBC  R22,R22
                 	MOV  R23,R22
                 	.ENDM
                 
                 	.MACRO __CWD2
                 	MOV  R24,R27
                 	ADD  R24,R24
                 	SBC  R24,R24
                 	MOV  R25,R24
                 	.ENDM
                 
                 	.MACRO __SETMSD1
                 	SER  R31
                 	SER  R22
                 	SER  R23
                 	.ENDM
                 
                 	.MACRO __ADDW1R15
                 	CLR  R0
                 	ADD  R30,R15
                 	ADC  R31,R0
                 	.ENDM
                 
                 	.MACRO __ADDW2R15
                 	CLR  R0
                 	ADD  R26,R15
                 	ADC  R27,R0
                 	.ENDM
                 
                 	.MACRO __EQB12
                 	CP   R30,R26
                 	LDI  R30,1
                 	BREQ PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __NEB12
                 	CP   R30,R26
                 	LDI  R30,1
                 	BRNE PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __LEB12
                 	CP   R30,R26
                 	LDI  R30,1
                 	BRGE PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __GEB12
                 	CP   R26,R30
                 	LDI  R30,1
                 	BRGE PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __LTB12
                 	CP   R26,R30
                 	LDI  R30,1
                 	BRLT PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __GTB12
                 	CP   R30,R26
                 	LDI  R30,1
                 	BRLT PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __LEB12U
                 	CP   R30,R26
                 	LDI  R30,1
                 	BRSH PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __GEB12U
                 	CP   R26,R30
                 	LDI  R30,1
                 	BRSH PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __LTB12U
                 	CP   R26,R30
                 	LDI  R30,1
                 	BRLO PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __GTB12U
                 	CP   R30,R26
                 	LDI  R30,1
                 	BRLO PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __CPW01
                 	CLR  R0
                 	CP   R0,R30
                 	CPC  R0,R31
                 	.ENDM
                 
                 	.MACRO __CPW02
                 	CLR  R0
                 	CP   R0,R26
                 	CPC  R0,R27
                 	.ENDM
                 
                 	.MACRO __CPD12
                 	CP   R30,R26
                 	CPC  R31,R27
                 	CPC  R22,R24
                 	CPC  R23,R25
                 	.ENDM
                 
                 	.MACRO __CPD21
                 	CP   R26,R30
                 	CPC  R27,R31
                 	CPC  R24,R22
                 	CPC  R25,R23
                 	.ENDM
                 
                 	.MACRO __BSTB1
                 	CLT
                 	TST  R30
                 	BREQ PC+2
                 	SET
                 	.ENDM
                 
                 	.MACRO __LNEGB1
                 	TST  R30
                 	LDI  R30,1
                 	BREQ PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __LNEGW1
                 	OR   R30,R31
                 	LDI  R30,1
                 	BREQ PC+2
                 	LDI  R30,0
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2M
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	CALL __GETW1Z
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	CALL __GETD1Z
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __GETW2X
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __GETD2X
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _page=R5
                 	.DEF _humid=R4
                 	.DEF _temp=R7
                 	.DEF _itemSelect=R6
                 	.DEF _enteredMenu=R9
                 	.DEF _blinkCounter=R10
                 	.DEF _blinkCounter_msb=R11
                 	.DEF _keyMenuPressed=R8
                 	.DEF _keySetPressed=R13
                 	.DEF _keyMenuOldFlag=R12
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 0051 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _tbl10_G100:
00002a 2710
00002b 03e8
00002c 0064
00002d 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
00002e 0001      	.DB  0x1,0x0
                 _tbl16_G100:
00002f 1000
000030 0100
000031 0010
000032 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
000033 0056
000034 0000      	.DB  0x56,0x0,0x0,0x0
000035 0000
000036 0000      	.DB  0x0,0x0,0x0,0x0
000037 0000      	.DB  0x0,0x0
                 
                 _0x0:
000038 3a48
000039 6425
00003a 2525
00003b 2020      	.DB  0x48,0x3A,0x25,0x64,0x25,0x25,0x20,0x20
00003c 5400
00003d 253a
00003e 4364
00003f 2020      	.DB  0x0,0x54,0x3A,0x25,0x64,0x43,0x20,0x20
000040 4800
000041 203a
000042 2020
000043 2020      	.DB  0x0,0x48,0x3A,0x20,0x20,0x20,0x20,0x20
000044 5400
000045 203a
000046 2020
000047 2020      	.DB  0x0,0x54,0x3A,0x20,0x20,0x20,0x20,0x20
D:\projects\tentController\sw\m32test\Release\List\m32prj.asm(1474): warning: .cseg .db misalignment - padding zero byte
000048 0000      	.DB  0x0
                 _0x2020003:
000049 c080      	.DB  0x80,0xC0
                 
                 __GLOBAL_INI_TBL:
00004a 000a      	.DW  0x0A
00004b 0004      	.DW  0x04
00004c 0066      	.DW  __REG_VARS*2
                 
00004d 0002      	.DW  0x02
00004e 0275      	.DW  __base_y_G101
00004f 0092      	.DW  _0x2020003*2
                 
                 _0xFFFFFFFF:
000050 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
000051 94f8      	CLI
                 
000052 27ee      	CLR  R30
000053 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000054 e0f1      	LDI  R31,1
000055 bff5      	OUT  MCUCR,R31
000056 bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
000057 e08d      	LDI  R24,(14-2)+1
000058 e0a2      	LDI  R26,2
000059 27bb      	CLR  R27
                 __CLEAR_REG:
00005a 93ed      	ST   X+,R30
00005b 958a      	DEC  R24
00005c f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
00005d e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
00005e e098      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
00005f e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
000060 93ed      	ST   X+,R30
000061 9701      	SBIW R24,1
000062 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000063 e9e4      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000064 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000065 9185      	LPM  R24,Z+
000066 9195      	LPM  R25,Z+
000067 9700      	SBIW R24,0
000068 f061      	BREQ __GLOBAL_INI_END
000069 91a5      	LPM  R26,Z+
00006a 91b5      	LPM  R27,Z+
00006b 9005      	LPM  R0,Z+
00006c 9015      	LPM  R1,Z+
00006d 01bf      	MOVW R22,R30
00006e 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
00006f 9005      	LPM  R0,Z+
000070 920d      	ST   X+,R0
000071 9701      	SBIW R24,1
000072 f7e1      	BRNE __GLOBAL_INI_LOOP
000073 01fb      	MOVW R30,R22
000074 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000075 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000076 bfed      	OUT  SPL,R30
000077 e0e8      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000078 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000079 e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
00007a e0d2      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
00007b 940c 007d 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0x00
                 
                 	.DSEG
                 	.ORG 0x260
                 
                 	.CSEG
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x80
                 	.EQU __sm_mask=0x70
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0x60
                 	.EQU __sm_ext_standby=0x70
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;void ShowMenu();
                 ;void ReadKeys();
                 ;void main(void)
                 ; 0000 0028 {
                 
                 	.CSEG
                 _main:
                 ; .FSTART _main
                 ; 0000 0029 
                 ; 0000 002A initialize();
00007d d0b0      	RCALL _initialize
                 ; 0000 002B // lcd_puts("Hi me");
                 ; 0000 002C // LcdBLight(1);
                 ; 0000 002D DispBacklight(1);
00007e e0a1      	LDI  R26,LOW(1)
00007f d0bf      	RCALL _DispBacklight
                 ; 0000 002E // Disp(0, 0, "Hi");
                 ; 0000 002F // Disp(0, 1, "Me");
                 ; 0000 0030 
                 ; 0000 0031 while (1)
                 _0x3:
                 ; 0000 0032 {
                 ; 0000 0033 // if (GetKeyMenu())
                 ; 0000 0034 // {
                 ; 0000 0035 //       Buzz(1);
                 ; 0000 0036 // }
                 ; 0000 0037 // else
                 ; 0000 0038 // {
                 ; 0000 0039 //       Buzz(0);
                 ; 0000 003A // }
                 ; 0000 003B // if (GetKeySet())
                 ; 0000 003C // {
                 ; 0000 003D //       Buzz(1);
                 ; 0000 003E // }
                 ; 0000 003F // else
                 ; 0000 0040 // {
                 ; 0000 0041 //       Buzz(0);
                 ; 0000 0042 // }
                 ; 0000 0043 
                 ; 0000 0044 // Disp(0, 1, "Hi");
                 ; 0000 0045 
                 ; 0000 0046 // sprintf(str, "%d,%d,", GetKeyMenu(), GetKeySet());
                 ; 0000 0047 // Disp(0, 0, str);
                 ; 0000 0048 
                 ; 0000 0049 ShowMenu();
000080 d026      	RCALL _ShowMenu
                 ; 0000 004A ReadKeys();
000081 d005      	RCALL _ReadKeys
                 ; 0000 004B Delay(200);
000082 eca8      	LDI  R26,LOW(200)
000083 e0b0      	LDI  R27,0
000084 d0bf      	RCALL _Delay
                 ; 0000 004C }
000085 cffa      	RJMP _0x3
                 ; 0000 004D }
                 _0x6:
000086 cfff      	RJMP _0x6
                 ; .FEND
                 ;void ReadKeys()
                 ; 0000 0060 {
                 _ReadKeys:
                 ; .FSTART _ReadKeys
                 ; 0000 0061 if (GetKeyMenu())
000087 d0a8      	RCALL _GetKeyMenu
000088 30e0      	CPI  R30,0
000089 f019      	BREQ _0x7
                 ; 0000 0062 {
                 ; 0000 0063 keyMenuOldFlag = 1;
00008a e0e1      	LDI  R30,LOW(1)
00008b 2ece      	MOV  R12,R30
                 ; 0000 0064 }
                 ; 0000 0065 else
00008c c00d      	RJMP _0x8
                 _0x7:
                 ; 0000 0066 {
                 ; 0000 0067 if (keyMenuOldFlag)
00008d 20cc      	TST  R12
00008e f059      	BREQ _0x9
                 ; 0000 0068 {
                 ; 0000 0069 keyMenuOldFlag = 0;
00008f 24cc      	CLR  R12
                 ; 0000 006A if (!enteredMenu)
000090 2099      	TST  R9
000091 f419      	BRNE _0xA
                 ; 0000 006B {
                 ; 0000 006C enteredMenu = 1;
000092 e0e1      	LDI  R30,LOW(1)
000093 2e9e      	MOV  R9,R30
                 ; 0000 006D itemSelect = 0;
000094 c004      	RJMP _0x25
                 ; 0000 006E }
                 ; 0000 006F else
                 _0xA:
                 ; 0000 0070 {
                 ; 0000 0071 itemSelect++;
000095 9463      	INC  R6
                 ; 0000 0072 if (itemSelect > 1)
000096 e0e1      	LDI  R30,LOW(1)
000097 15e6      	CP   R30,R6
000098 f408      	BRSH _0xC
                 ; 0000 0073 {
                 ; 0000 0074 itemSelect = 0;
                 _0x25:
000099 2466      	CLR  R6
                 ; 0000 0075 }
                 ; 0000 0076 }
                 _0xC:
                 ; 0000 0077 }
                 ; 0000 0078 }
                 _0x9:
                 _0x8:
                 ; 0000 0079 
                 ; 0000 007A if (GetKeySet())
00009a d097      	RCALL _GetKeySet
00009b 30e0      	CPI  R30,0
00009c f011      	BREQ _0xD
                 ; 0000 007B {
                 ; 0000 007C keySetOldFlag = 1;
00009d e0e1      	LDI  R30,LOW(1)
00009e c005      	RJMP _0x26
                 ; 0000 007D }
                 ; 0000 007E else
                 _0xD:
                 ; 0000 007F {
                 ; 0000 0080 if (keySetOldFlag)
00009f 91e0 0274 	LDS  R30,_keySetOldFlag
0000a1 30e0      	CPI  R30,0
0000a2 f019      	BREQ _0xF
                 ; 0000 0081 {
                 ; 0000 0082 keySetOldFlag = 0;
0000a3 e0e0      	LDI  R30,LOW(0)
                 _0x26:
0000a4 93e0 0274 	STS  _keySetOldFlag,R30
                 ; 0000 0083 }
                 ; 0000 0084 }
                 _0xF:
                 ; 0000 0085 }
0000a6 9508      	RET
                 ; .FEND
                 ;void ShowMenu()
                 ; 0000 0088 {
                 _ShowMenu:
                 ; .FSTART _ShowMenu
                 ; 0000 0089 switch (page)
0000a7 2de5      	MOV  R30,R5
0000a8 e0f0      	LDI  R31,0
                 ; 0000 008A {
                 ; 0000 008B case PAGE_MAIN:
0000a9 9730      	SBIW R30,0
0000aa f5d1      	BRNE _0x24
                 ; 0000 008C if (enteredMenu == 0)
0000ab 2099      	TST  R9
0000ac f421      	BRNE _0x14
                 ; 0000 008D {
                 ; 0000 008E 
                 ; 0000 008F sprintf(str, "H:%d%%  ", humid);
0000ad d2e8      	RCALL SUBOPT_0x0
0000ae d2ec      	RCALL SUBOPT_0x1
                 ; 0000 0090 Disp(0, 0, str);
                 ; 0000 0091 sprintf(str, "T:%dC  ", temp);
0000af d2fe      	RCALL SUBOPT_0x2
                 ; 0000 0092 Disp(0, 1, str);
                 ; 0000 0093 }
                 ; 0000 0094 else
0000b0 c034      	RJMP _0x15
                 _0x14:
                 ; 0000 0095 {
                 ; 0000 0096 switch (itemSelect)
0000b1 2de6      	MOV  R30,R6
0000b2 e0f0      	LDI  R31,0
                 ; 0000 0097 {
                 ; 0000 0098 case 0:
0000b3 9730      	SBIW R30,0
0000b4 f4b9      	BRNE _0x19
                 ; 0000 0099 blinkCounter++;
0000b5 d30b      	RCALL SUBOPT_0x3
                 ; 0000 009A if (blinkCounter < 3)
0000b6 f460      	BRSH _0x1A
                 ; 0000 009B {
                 ; 0000 009C sprintf(str, "H:     ", humid);
0000b7 d2de      	RCALL SUBOPT_0x0
                +
0000b8 e8e1     +LDI R30 , LOW ( 2 * _0x0 + ( 17 ) )
0000b9 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 17 ) )
                 	__POINTW1FN _0x0,17
0000ba 93fa      	ST   -Y,R31
0000bb 93ea      	ST   -Y,R30
0000bc 2de4      	MOV  R30,R4
0000bd d30b      	RCALL SUBOPT_0x4
                 ; 0000 009D Disp(0, 0, str);
0000be e0e0      	LDI  R30,LOW(0)
0000bf d313      	RCALL SUBOPT_0x5
                 ; 0000 009E sprintf(str, "T:%dC  ", temp);
0000c0 d2d5      	RCALL SUBOPT_0x0
0000c1 d2ec      	RCALL SUBOPT_0x2
                 ; 0000 009F Disp(0, 1, str);
                 ; 0000 00A0 }
                 ; 0000 00A1 else if (blinkCounter < 6)
0000c2 c008      	RJMP _0x1B
                 _0x1A:
0000c3 d313      	RCALL SUBOPT_0x6
0000c4 f420      	BRSH _0x1C
                 ; 0000 00A2 {
                 ; 0000 00A3 sprintf(str, "H:%d%%  ", humid);
0000c5 d2d0      	RCALL SUBOPT_0x0
0000c6 d2d4      	RCALL SUBOPT_0x1
                 ; 0000 00A4 Disp(0, 0, str);
                 ; 0000 00A5 sprintf(str, "T:%dC  ", temp);
0000c7 d2e6      	RCALL SUBOPT_0x2
                 ; 0000 00A6 Disp(0, 1, str);
                 ; 0000 00A7 }
                 ; 0000 00A8 else
0000c8 c002      	RJMP _0x1D
                 _0x1C:
                 ; 0000 00A9 {
                 ; 0000 00AA blinkCounter = 0;
0000c9 24aa      	CLR  R10
0000ca 24bb      	CLR  R11
                 ; 0000 00AB }
                 _0x1D:
                 _0x1B:
                 ; 0000 00AC break;
0000cb c019      	RJMP _0x18
                 ; 0000 00AD case 1:
                 _0x19:
0000cc 30e1      	CPI  R30,LOW(0x1)
0000cd e0a0      	LDI  R26,HIGH(0x1)
0000ce 07fa      	CPC  R31,R26
0000cf f4a9      	BRNE _0x23
                 ; 0000 00AE blinkCounter++;
0000d0 d2f0      	RCALL SUBOPT_0x3
                 ; 0000 00AF if (blinkCounter < 3)
0000d1 f458      	BRSH _0x1F
                 ; 0000 00B0 {
                 ; 0000 00B1 sprintf(str, "H:%d%%  ", humid);
0000d2 d2c3      	RCALL SUBOPT_0x0
0000d3 d2c7      	RCALL SUBOPT_0x1
                 ; 0000 00B2 Disp(0, 0, str);
                 ; 0000 00B3 sprintf(str, "T:     ", temp);
                +
0000d4 e8e9     +LDI R30 , LOW ( 2 * _0x0 + ( 25 ) )
0000d5 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 25 ) )
                 	__POINTW1FN _0x0,25
0000d6 93fa      	ST   -Y,R31
0000d7 93ea      	ST   -Y,R30
0000d8 2de7      	MOV  R30,R7
0000d9 d2ef      	RCALL SUBOPT_0x4
                 ; 0000 00B4 Disp(0, 1, str);
0000da e0e1      	LDI  R30,LOW(1)
0000db d2f7      	RCALL SUBOPT_0x5
                 ; 0000 00B5 }
                 ; 0000 00B6 else if (blinkCounter < 6)
0000dc c008      	RJMP _0x20
                 _0x1F:
0000dd d2f9      	RCALL SUBOPT_0x6
0000de f420      	BRSH _0x21
                 ; 0000 00B7 {
                 ; 0000 00B8 sprintf(str, "H:%d%%  ", humid);
0000df d2b6      	RCALL SUBOPT_0x0
0000e0 d2ba      	RCALL SUBOPT_0x1
                 ; 0000 00B9 Disp(0, 0, str);
                 ; 0000 00BA sprintf(str, "T:%dC  ", temp);
0000e1 d2cc      	RCALL SUBOPT_0x2
                 ; 0000 00BB Disp(0, 1, str);
                 ; 0000 00BC }
                 ; 0000 00BD else
0000e2 c002      	RJMP _0x22
                 _0x21:
                 ; 0000 00BE {
                 ; 0000 00BF blinkCounter = 0;
0000e3 24aa      	CLR  R10
0000e4 24bb      	CLR  R11
                 ; 0000 00C0 }
                 _0x22:
                 _0x20:
                 ; 0000 00C1 break;
                 ; 0000 00C2 
                 ; 0000 00C3 default:
                 _0x23:
                 ; 0000 00C4 break;
                 ; 0000 00C5 }
                 _0x18:
                 ; 0000 00C6 }
                 _0x15:
                 ; 0000 00C7 
                 ; 0000 00C8 break;
                 ; 0000 00C9 
                 ; 0000 00CA default:
                 _0x24:
                 ; 0000 00CB break;
                 ; 0000 00CC }
                 ; 0000 00CD }
0000e5 9508      	RET
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 ;char GetP1Button1()
                 ; 0001 000A {
                 
                 	.CSEG
                 _GetP1Button1:
                 ; .FSTART _GetP1Button1
                 ; 0001 000B return (KEY1_PORT & KEY3_PIN);
0000e6 b3e3      	IN   R30,0x13
0000e7 78e0      	ANDI R30,LOW(0x80)
0000e8 9508      	RET
                 ; 0001 000C }
                 ; .FEND
                 ;char GetP1Button2()
                 ; 0001 000F {
                 _GetP1Button2:
                 ; .FSTART _GetP1Button2
                 ; 0001 0010 return (KEY2_PORT & KEY2_PIN);
0000e9 b3e3      	IN   R30,0x13
0000ea 74e0      	ANDI R30,LOW(0x40)
0000eb 9508      	RET
                 ; 0001 0011 }
                 ; .FEND
                 ;char GetP1Button3()
                 ; 0001 0014 {
                 ; 0001 0015 return (KEY3_PORT & KEY3_PIN);
                 ; 0001 0016 }
                 ;void SetBuzz(char _val)
                 ; 0001 0019 {
                 ; 0001 001A if (_val)
                 ;	_val -> R17
                 ; 0001 001B BUZZ_PORT |= BUZZ_PIN;
                 ; 0001 001C else
                 ; 0001 001D BUZZ_PORT &= ~(BUZZ_PIN);
                 ; 0001 001E }
                 ;void P4CharLcd(char _x, char _y, char *_str)
                 ; 0001 0021 {
                 _P4CharLcd:
                 ; .FSTART _P4CharLcd
                 ; 0001 0022 lcd_gotoxy(_x, _y);
0000ec d2ef      	RCALL SUBOPT_0x7
                 ;	_x -> R18
                 ;	_y -> R19
                 ;	*_str -> R16,R17
0000ed 2fa3      	MOV  R26,R19
0000ee d213      	RCALL _lcd_gotoxy
                 ; 0001 0023 lcd_puts(_str);
0000ef 01d8      	MOVW R26,R16
0000f0 d250      	RCALL _lcd_puts
                 ; 0001 0024 }
0000f1 c04a      	RJMP _0x2080004
                 ; .FEND
                 ;void P4CharLcdBacklight(char _val)
                 ; 0001 0027 {
                 _P4CharLcdBacklight:
                 ; .FSTART _P4CharLcdBacklight
                 ; 0001 0028 if (_val)
0000f2 931a      	ST   -Y,R17
0000f3 2f1a      	MOV  R17,R26
                 ;	_val -> R17
0000f4 3010      	CPI  R17,0
0000f5 f011      	BREQ _0x20005
                 ; 0001 0029 LCD_BACKLIGHT_PORT |= LCD_BACKLIGHT_PIN;
0000f6 9a92      	SBI  0x12,2
                 ; 0001 002A else
0000f7 c001      	RJMP _0x20006
                 _0x20005:
                 ; 0001 002B LCD_BACKLIGHT_PORT &= ~(LCD_BACKLIGHT_PIN);
0000f8 9892      	CBI  0x12,2
                 ; 0001 002C }
                 _0x20006:
0000f9 940c 037b 	JMP  _0x2080001
                 ; .FEND
                 ;void AvrDelayMs(int _val)
                 ; 0001 002F {
                 _AvrDelayMs:
                 ; .FSTART _AvrDelayMs
                 ; 0001 0030 delay_ms(_val);
0000fb d2e6      	RCALL SUBOPT_0x8
                 ;	_val -> R16,R17
0000fc d337      	RCALL _delay_ms
                 ; 0001 0031 }
0000fd c048      	RJMP _0x2080003
                 ; .FEND
                 ;void hwInit(void)
                 ; 0001 0033 {
                 _hwInit:
                 ; .FSTART _hwInit
                 ; 0001 0034 // Declare your local variables here
                 ; 0001 0035 
                 ; 0001 0036 // Input/Output Ports initialization
                 ; 0001 0037 // Port A initialization
                 ; 0001 0038 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0001 0039 DDRA = (0 << DDA7) | (0 << DDA6) | (0 << DDA5) | (0 << DDA4) | (0 << DDA3) | (0 << DDA2) | (0 << DDA1) | (0 << DDA0);
0000fe e0e0      	LDI  R30,LOW(0)
0000ff bbea      	OUT  0x1A,R30
                 ; 0001 003A // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0001 003B PORTA = (0 << PORTA7) | (0 << PORTA6) | (0 << PORTA5) | (0 << PORTA4) | (0 << PORTA3) | (0 << PORTA2) | (0 << PORTA1) | (0 << PORTA0);
000100 bbeb      	OUT  0x1B,R30
                 ; 0001 003C 
                 ; 0001 003D // Port B initialization
                 ; 0001 003E // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0001 003F DDRB = (0 << DDB7) | (0 << DDB6) | (0 << DDB5) | (0 << DDB4) | (0 << DDB3) | (0 << DDB2) | (0 << DDB1) | (0 << DDB0);
000101 bbe7      	OUT  0x17,R30
                 ; 0001 0040 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0001 0041 PORTB = (0 << PORTB7) | (0 << PORTB6) | (0 << PORTB5) | (0 << PORTB4) | (0 << PORTB3) | (0 << PORTB2) | (0 << PORTB1) | (0 << PORTB0);
000102 bbe8      	OUT  0x18,R30
                 ; 0001 0042 
                 ; 0001 0043 // Port C initialization
                 ; 0001 0044 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=Out Bit2=In Bit1=In Bit0=In
                 ; 0001 0045 DDRC = (0 << DDC7) | (0 << DDC6) | (0 << DDC5) | (0 << DDC4) | (1 << DDC3) | (0 << DDC2) | (0 << DDC1) | (0 << DDC0);
000103 e0e8      	LDI  R30,LOW(8)
000104 bbe4      	OUT  0x14,R30
                 ; 0001 0046 // State: Bit7=P Bit6=P Bit5=P Bit4=T Bit3=0 Bit2=T Bit1=T Bit0=T
                 ; 0001 0047 PORTC = (1 << PORTC7) | (1 << PORTC6) | (1 << PORTC5) | (0 << PORTC4) | (0 << PORTC3) | (0 << PORTC2) | (0 << PORTC1) | (0 << PORTC0);
000105 eee0      	LDI  R30,LOW(224)
000106 bbe5      	OUT  0x15,R30
                 ; 0001 0048 
                 ; 0001 0049 // Port D initialization
                 ; 0001 004A // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=Out Bit1=In Bit0=In
                 ; 0001 004B DDRD = (0 << DDD7) | (0 << DDD6) | (0 << DDD5) | (0 << DDD4) | (0 << DDD3) | (1 << DDD2) | (0 << DDD1) | (0 << DDD0);
000107 e0e4      	LDI  R30,LOW(4)
000108 bbe1      	OUT  0x11,R30
                 ; 0001 004C // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=0 Bit1=T Bit0=T
                 ; 0001 004D PORTD = (0 << PORTD7) | (0 << PORTD6) | (0 << PORTD5) | (0 << PORTD4) | (0 << PORTD3) | (0 << PORTD2) | (0 << PORTD1) | (0 << PORTD0);
000109 e0e0      	LDI  R30,LOW(0)
00010a bbe2      	OUT  0x12,R30
                 ; 0001 004E 
                 ; 0001 004F // PORTD bit 5 High Drive enabled: Off
                 ; 0001 0050 // PORTD bit 6 High Drive enabled: Off
                 ; 0001 0051 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=0 Bit1=T Bit0=T
                 ; 0001 0052 // HDR=(0<<HDR5) | (0<<HDR4) | (0<<HDR3) | (0<<HDR2) | (0<<HDR1) | (0<<HDR0);
                 ; 0001 0053 
                 ; 0001 0054 // Timer/Counter 0 initialization
                 ; 0001 0055 // Clock source: System Clock
                 ; 0001 0056 // Clock value: Timer 0 Stopped
                 ; 0001 0057 // Mode: Normal top=0xFF
                 ; 0001 0058 // OC0 output: Disconnected
                 ; 0001 0059 TCCR0 = (0 << WGM00) | (0 << COM01) | (0 << COM00) | (0 << WGM01) | (0 << CS02) | (0 << CS01) | (0 << CS00);
00010b bfe3      	OUT  0x33,R30
                 ; 0001 005A TCNT0 = 0x00;
00010c bfe2      	OUT  0x32,R30
                 ; 0001 005B OCR0 = 0x00;
00010d bfec      	OUT  0x3C,R30
                 ; 0001 005C 
                 ; 0001 005D // Timer/Counter 1 initialization
                 ; 0001 005E // Clock source: System Clock
                 ; 0001 005F // Clock value: Timer1 Stopped
                 ; 0001 0060 // Mode: Normal top=0xFFFF
                 ; 0001 0061 // OC1A output: Disconnected
                 ; 0001 0062 // OC1B output: Disconnected
                 ; 0001 0063 // Noise Canceler: Off
                 ; 0001 0064 // Input Capture on Falling Edge
                 ; 0001 0065 // Timer1 Overflow Interrupt: Off
                 ; 0001 0066 // Input Capture Interrupt: Off
                 ; 0001 0067 // Compare A Match Interrupt: Off
                 ; 0001 0068 // Compare B Match Interrupt: Off
                 ; 0001 0069 TCCR1A = (0 << COM1A1) | (0 << COM1A0) | (0 << COM1B1) | (0 << COM1B0) | (0 << WGM11) | (0 << WGM10);
00010e bdef      	OUT  0x2F,R30
                 ; 0001 006A TCCR1B = (0 << ICNC1) | (0 << ICES1) | (0 << WGM13) | (0 << WGM12) | (0 << CS12) | (0 << CS11) | (0 << CS10);
00010f bdee      	OUT  0x2E,R30
                 ; 0001 006B TCNT1H = 0x00;
000110 bded      	OUT  0x2D,R30
                 ; 0001 006C TCNT1L = 0x00;
000111 bdec      	OUT  0x2C,R30
                 ; 0001 006D ICR1H = 0x00;
000112 bde7      	OUT  0x27,R30
                 ; 0001 006E ICR1L = 0x00;
000113 bde6      	OUT  0x26,R30
                 ; 0001 006F OCR1AH = 0x00;
000114 bdeb      	OUT  0x2B,R30
                 ; 0001 0070 OCR1AL = 0x00;
000115 bdea      	OUT  0x2A,R30
                 ; 0001 0071 OCR1BH = 0x00;
000116 bde9      	OUT  0x29,R30
                 ; 0001 0072 OCR1BL = 0x00;
000117 bde8      	OUT  0x28,R30
                 ; 0001 0073 
                 ; 0001 0074 // Timer/Counter 2 initialization
                 ; 0001 0075 // Clock source: System Clock
                 ; 0001 0076 // Clock value: Timer2 Stopped
                 ; 0001 0077 // Mode: Normal top=0xFF
                 ; 0001 0078 // OC2 output: Disconnected
                 ; 0001 0079 ASSR = 0 << AS2;
000118 bde2      	OUT  0x22,R30
                 ; 0001 007A TCCR2 = (0 << PWM2) | (0 << COM21) | (0 << COM20) | (0 << CTC2) | (0 << CS22) | (0 << CS21) | (0 << CS20);
000119 bde5      	OUT  0x25,R30
                 ; 0001 007B TCNT2 = 0x00;
00011a bde4      	OUT  0x24,R30
                 ; 0001 007C OCR2 = 0x00;
00011b bde3      	OUT  0x23,R30
                 ; 0001 007D 
                 ; 0001 007E // Timer(s)/Counter(s) Interrupt(s) initialization
                 ; 0001 007F TIMSK = (0 << OCIE2) | (0 << TOIE2) | (0 << TICIE1) | (0 << OCIE1A) | (0 << OCIE1B) | (0 << TOIE1) | (0 << OCIE0) | (0 << TOIE0);
00011c bfe9      	OUT  0x39,R30
                 ; 0001 0080 
                 ; 0001 0081 // External Interrupt(s) initialization
                 ; 0001 0082 // INT0: Off
                 ; 0001 0083 // INT1: Off
                 ; 0001 0084 // INT2: Off
                 ; 0001 0085 MCUCR = (0 << ISC11) | (0 << ISC10) | (0 << ISC01) | (0 << ISC00);
00011d bfe5      	OUT  0x35,R30
                 ; 0001 0086 MCUCSR = (0 << ISC2);
00011e bfe4      	OUT  0x34,R30
                 ; 0001 0087 
                 ; 0001 0088 // USART initialization
                 ; 0001 0089 // USART disabled
                 ; 0001 008A UCSRB = (0 << RXCIE) | (0 << TXCIE) | (0 << UDRIE) | (0 << RXEN) | (0 << TXEN) | (0 << UCSZ2) | (0 << RXB8) | (0 << TXB8);
00011f b9ea      	OUT  0xA,R30
                 ; 0001 008B 
                 ; 0001 008C // Analog Comparator initialization
                 ; 0001 008D // Analog Comparator: Off
                 ; 0001 008E // The Analog Comparator's positive input is
                 ; 0001 008F // connected to the AIN0 pin
                 ; 0001 0090 // The Analog Comparator's negative input is
                 ; 0001 0091 // connected to the AIN1 pin
                 ; 0001 0092 ACSR = (1 << ACD) | (0 << ACBG) | (0 << ACO) | (0 << ACI) | (0 << ACIE) | (0 << ACIC) | (0 << ACIS1) | (0 << ACIS0);
000120 e8e0      	LDI  R30,LOW(128)
000121 b9e8      	OUT  0x8,R30
                 ; 0001 0093 SFIOR = (0 << ACME);
000122 e0e0      	LDI  R30,LOW(0)
000123 bfe0      	OUT  0x30,R30
                 ; 0001 0094 
                 ; 0001 0095 // ADC initialization
                 ; 0001 0096 // ADC disabled
                 ; 0001 0097 ADCSRA = (0 << ADEN) | (0 << ADSC) | (0 << ADATE) | (0 << ADIF) | (0 << ADIE) | (0 << ADPS2) | (0 << ADPS1) | (0 << ADPS0);
000124 b9e6      	OUT  0x6,R30
                 ; 0001 0098 
                 ; 0001 0099 // SPI initialization
                 ; 0001 009A // SPI disabled
                 ; 0001 009B SPCR = (0 << SPIE) | (0 << SPE) | (0 << DORD) | (0 << MSTR) | (0 << CPOL) | (0 << CPHA) | (0 << SPR1) | (0 << SPR0);
000125 b9ed      	OUT  0xD,R30
                 ; 0001 009C 
                 ; 0001 009D // TWI initialization
                 ; 0001 009E // TWI disabled
                 ; 0001 009F TWCR = (0 << TWEA) | (0 << TWSTA) | (0 << TWSTO) | (0 << TWEN) | (0 << TWIE);
000126 bfe6      	OUT  0x36,R30
                 ; 0001 00A0 
                 ; 0001 00A1 // Alphanumeric LCD initialization
                 ; 0001 00A2 // Connections are specified in the
                 ; 0001 00A3 // Project|Configure|C Compiler|Libraries|Alphanumeric LCD menu:
                 ; 0001 00A4 // RS: PORTB Bit 0
                 ; 0001 00A5 // RD: PORTC Bit 2
                 ; 0001 00A6 // EN: PORTB Bit 1
                 ; 0001 00A7 // D4: PORTB Bit 2
                 ; 0001 00A8 // D5: PORTB Bit 5
                 ; 0001 00A9 // D6: PORTB Bit 6
                 ; 0001 00AA // D7: PORTB Bit 7
                 ; 0001 00AB // Characters/line: 8
                 ; 0001 00AC lcd_init(8);
000127 e0a8      	LDI  R26,LOW(8)
000128 d227      	RCALL _lcd_init
                 ; 0001 00AD 
                 ; 0001 00AE lcd_gotoxy(0, 0);
000129 e0e0      	LDI  R30,LOW(0)
00012a 93ea      	ST   -Y,R30
00012b e0a0      	LDI  R26,LOW(0)
00012c d1d5      	RCALL _lcd_gotoxy
                 ; 0001 00AF }
00012d 9508      	RET
                 ; .FEND
                 ;void initialize()
                 ; 0002 0005 {
                 
                 	.CSEG
                 _initialize:
                 ; .FSTART _initialize
                 ; 0002 0006 hwInit();
00012e dfcf      	RCALL _hwInit
                 ; 0002 0007 }
00012f 9508      	RET
                 ; .FEND
                 ;void Buzz(char _val)
                 ; 0002 000B {
                 ; 0002 000C SetBuzz(_val);
                 ;	_val -> R17
                 ; 0002 000D }
                 ;char GetHumid() {}
                 ; 0002 000E char GetHumid() {}
                 ;char GetTemp() {}
                 ; 0002 000F char GetTemp() {}
                 ;char GetKeyMenu()
                 ; 0002 0011 {
                 _GetKeyMenu:
                 ; .FSTART _GetKeyMenu
                 ; 0002 0012 return !GetP1Button1();
000130 dfb5      	RCALL _GetP1Button1
000131 c001      	RJMP _0x2080005
                 ; 0002 0013 }
                 ; .FEND
                 ;char GetKeySet()
                 ; 0002 0015 {
                 _GetKeySet:
                 ; .FSTART _GetKeySet
                 ; 0002 0016 return !GetP1Button2();
000132 dfb6      	RCALL _GetP1Button2
                 _0x2080005:
                +
000133 23ee     +TST R30
000134 e0e1     +LDI R30 , 1
000135 f009     +BREQ PC + 2
000136 27ee     +CLR R30
                 	__LNEGB1
000137 9508      	RET
                 ; 0002 0017 }
                 ; .FEND
                 ;void Disp(char _x, char _y, char *_str)
                 ; 0002 0019 {
                 _Disp:
                 ; .FSTART _Disp
                 ; 0002 001A P4CharLcd(_x, _y, _str);
000138 d2a3      	RCALL SUBOPT_0x7
                 ;	_x -> R18
                 ;	_y -> R19
                 ;	*_str -> R16,R17
000139 933a      	ST   -Y,R19
00013a 01d8      	MOVW R26,R16
00013b dfb0      	RCALL _P4CharLcd
                 ; 0002 001B }
                 _0x2080004:
00013c d2e5      	RCALL __LOADLOCR4
00013d 9626      	ADIW R28,6
00013e 9508      	RET
                 ; .FEND
                 ;void DispBacklight(char _val)
                 ; 0002 001D {
                 _DispBacklight:
                 ; .FSTART _DispBacklight
                 ; 0002 001E P4CharLcdBacklight(_val);
00013f 931a      	ST   -Y,R17
000140 2f1a      	MOV  R17,R26
                 ;	_val -> R17
000141 dfb0      	RCALL _P4CharLcdBacklight
                 ; 0002 001F }
000142 940c 037b 	JMP  _0x2080001
                 ; .FEND
                 ;void SetHumidifier(char _val) {}
                 ; 0002 0021 void SetHumidifier(char _val) {}
                 ;void SetFan(char _val) {}
                 ; 0002 0022 void SetFan(char _val) {}
                 ;void SetHeater(char _val) {}
                 ; 0002 0023 void SetHeater(char _val) {}
                 ;void SetCooler(char _val) {}
                 ; 0002 0024 void SetCooler(char _val) {}
                 ;void Delay(int _val)
                 ; 0002 0027 {
                 _Delay:
                 ; .FSTART _Delay
                 ; 0002 0028 AvrDelayMs(_val);
000144 d29d      	RCALL SUBOPT_0x8
                 ;	_val -> R16,R17
000145 dfb5      	RCALL _AvrDelayMs
                 ; 0002 0029 }
                 _0x2080003:
000146 9109      	LD   R16,Y+
000147 9119      	LD   R17,Y+
000148 9508      	RET
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 _put_buff_G100:
                 ; .FSTART _put_buff_G100
000149 d2cf      	RCALL __SAVELOCR6
00014a 019d      	MOVW R18,R26
00014b 815e      	LDD  R21,Y+6
00014c 9612      	ADIW R26,2
                +
00014d 91ed     +LD R30 , X +
00014e 91fc     +LD R31 , X
00014f 9711     +SBIW R26 , 1
                 	__GETW1P
000150 9730      	SBIW R30,0
000151 f0e9      	BREQ _0x2000010
000152 01d9      	MOVW R26,R18
000153 d292      	RCALL SUBOPT_0x9
000154 018f      	MOVW R16,R30
000155 9730      	SBIW R30,0
000156 f059      	BREQ _0x2000012
                +
000157 3002     +CPI R16 , LOW ( 2 )
000158 e0e0     +LDI R30 , HIGH ( 2 )
000159 071e     +CPC R17 , R30
                 	__CPWRN 16,17,2
00015a f060      	BRLO _0x2000013
00015b 01f8      	MOVW R30,R16
00015c 9731      	SBIW R30,1
00015d 018f      	MOVW R16,R30
                +
00015e 01d9     +MOVW R26 , R18
00015f 9614     +ADIW R26 , 4
000160 93ed     +ST X + , R30
000161 93fc     +ST X , R31
                 	__PUTW1RNS 18,4
                 _0x2000012:
000162 01d9      	MOVW R26,R18
000163 9612      	ADIW R26,2
000164 d286      	RCALL SUBOPT_0xA
000165 9731      	SBIW R30,1
000166 8350      	ST   Z,R21
                 _0x2000013:
000167 01d9      	MOVW R26,R18
                +
000168 91ed     +LD R30 , X +
000169 91fc     +LD R31 , X
00016a 9711     +SBIW R26 , 1
                 	__GETW1P
00016b 23ff      	TST  R31
00016c f00a      	BRMI _0x2000014
00016d d27d      	RCALL SUBOPT_0xA
                 _0x2000014:
00016e c005      	RJMP _0x2000015
                 _0x2000010:
00016f 01d9      	MOVW R26,R18
000170 efef      	LDI  R30,LOW(65535)
000171 efff      	LDI  R31,HIGH(65535)
000172 93ed      	ST   X+,R30
000173 93fc      	ST   X,R31
                 _0x2000015:
000174 d2ab      	RCALL __LOADLOCR6
000175 9627      	ADIW R28,7
000176 9508      	RET
                 ; .FEND
                 __print_G100:
                 ; .FSTART __print_G100
000177 93ba      	ST   -Y,R27
000178 93aa      	ST   -Y,R26
000179 9726      	SBIW R28,6
00017a d29e      	RCALL __SAVELOCR6
00017b e010      	LDI  R17,0
00017c 85ac      	LDD  R26,Y+12
00017d 85bd      	LDD  R27,Y+12+1
00017e e0e0      	LDI  R30,LOW(0)
00017f e0f0      	LDI  R31,HIGH(0)
000180 93ed      	ST   X+,R30
000181 93fc      	ST   X,R31
                 _0x2000016:
000182 89ea      	LDD  R30,Y+18
000183 89fb      	LDD  R31,Y+18+1
000184 9631      	ADIW R30,1
000185 8bea      	STD  Y+18,R30
000186 8bfb      	STD  Y+18+1,R31
000187 9731      	SBIW R30,1
000188 91e4      	LPM  R30,Z
000189 2f2e      	MOV  R18,R30
00018a 30e0      	CPI  R30,0
00018b f409      	BRNE PC+2
00018c c108      	RJMP _0x2000018
00018d 2fe1      	MOV  R30,R17
00018e 30e0      	CPI  R30,0
00018f f431      	BRNE _0x200001C
000190 3225      	CPI  R18,37
000191 f411      	BRNE _0x200001D
000192 e011      	LDI  R17,LOW(1)
000193 c001      	RJMP _0x200001E
                 _0x200001D:
000194 d25c      	RCALL SUBOPT_0xB
                 _0x200001E:
000195 c0fe      	RJMP _0x200001B
                 _0x200001C:
000196 30e1      	CPI  R30,LOW(0x1)
000197 f4a1      	BRNE _0x200001F
000198 3225      	CPI  R18,37
000199 f411      	BRNE _0x2000020
00019a d256      	RCALL SUBOPT_0xB
00019b c0f7      	RJMP _0x20000CC
                 _0x2000020:
00019c e012      	LDI  R17,LOW(2)
00019d e040      	LDI  R20,LOW(0)
00019e e000      	LDI  R16,LOW(0)
00019f 322d      	CPI  R18,45
0001a0 f411      	BRNE _0x2000021
0001a1 e001      	LDI  R16,LOW(1)
0001a2 c0f1      	RJMP _0x200001B
                 _0x2000021:
0001a3 322b      	CPI  R18,43
0001a4 f411      	BRNE _0x2000022
0001a5 e24b      	LDI  R20,LOW(43)
0001a6 c0ed      	RJMP _0x200001B
                 _0x2000022:
0001a7 3220      	CPI  R18,32
0001a8 f411      	BRNE _0x2000023
0001a9 e240      	LDI  R20,LOW(32)
0001aa c0e9      	RJMP _0x200001B
                 _0x2000023:
0001ab c002      	RJMP _0x2000024
                 _0x200001F:
0001ac 30e2      	CPI  R30,LOW(0x2)
0001ad f439      	BRNE _0x2000025
                 _0x2000024:
0001ae e050      	LDI  R21,LOW(0)
0001af e013      	LDI  R17,LOW(3)
0001b0 3320      	CPI  R18,48
0001b1 f411      	BRNE _0x2000026
0001b2 6800      	ORI  R16,LOW(128)
0001b3 c0e0      	RJMP _0x200001B
                 _0x2000026:
0001b4 c003      	RJMP _0x2000027
                 _0x2000025:
0001b5 30e3      	CPI  R30,LOW(0x3)
0001b6 f009      	BREQ PC+2
0001b7 c0dc      	RJMP _0x200001B
                 _0x2000027:
0001b8 3320      	CPI  R18,48
0001b9 f010      	BRLO _0x200002A
0001ba 332a      	CPI  R18,58
0001bb f008      	BRLO _0x200002B
                 _0x200002A:
0001bc c007      	RJMP _0x2000029
                 _0x200002B:
0001bd e0aa      	LDI  R26,LOW(10)
0001be 9f5a      	MUL  R21,R26
0001bf 2d50      	MOV  R21,R0
0001c0 2fe2      	MOV  R30,R18
0001c1 53e0      	SUBI R30,LOW(48)
0001c2 0f5e      	ADD  R21,R30
0001c3 c0d0      	RJMP _0x200001B
                 _0x2000029:
0001c4 2fe2      	MOV  R30,R18
0001c5 36e3      	CPI  R30,LOW(0x63)
0001c6 f439      	BRNE _0x200002F
0001c7 d230      	RCALL SUBOPT_0xC
0001c8 89e8      	LDD  R30,Y+16
0001c9 89f9      	LDD  R31,Y+16+1
0001ca 81a4      	LDD  R26,Z+4
0001cb 93aa      	ST   -Y,R26
0001cc d231      	RCALL SUBOPT_0xD
0001cd c0c5      	RJMP _0x2000030
                 _0x200002F:
0001ce 37e3      	CPI  R30,LOW(0x73)
0001cf f429      	BRNE _0x2000032
0001d0 d227      	RCALL SUBOPT_0xC
0001d1 d232      	RCALL SUBOPT_0xE
0001d2 d1aa      	RCALL _strlen
0001d3 2f1e      	MOV  R17,R30
0001d4 c007      	RJMP _0x2000033
                 _0x2000032:
0001d5 37e0      	CPI  R30,LOW(0x70)
0001d6 f449      	BRNE _0x2000035
0001d7 d220      	RCALL SUBOPT_0xC
0001d8 d22b      	RCALL SUBOPT_0xE
0001d9 d1af      	RCALL _strlenf
0001da 2f1e      	MOV  R17,R30
0001db 6008      	ORI  R16,LOW(8)
                 _0x2000033:
0001dc 6002      	ORI  R16,LOW(2)
0001dd 770f      	ANDI R16,LOW(127)
0001de e030      	LDI  R19,LOW(0)
0001df c037      	RJMP _0x2000036
                 _0x2000035:
0001e0 36e4      	CPI  R30,LOW(0x64)
0001e1 f011      	BREQ _0x2000039
0001e2 36e9      	CPI  R30,LOW(0x69)
0001e3 f411      	BRNE _0x200003A
                 _0x2000039:
0001e4 6004      	ORI  R16,LOW(4)
0001e5 c002      	RJMP _0x200003B
                 _0x200003A:
0001e6 37e5      	CPI  R30,LOW(0x75)
0001e7 f431      	BRNE _0x200003C
                 _0x200003B:
0001e8 e5e4      	LDI  R30,LOW(_tbl10_G100*2)
0001e9 e0f0      	LDI  R31,HIGH(_tbl10_G100*2)
0001ea 83ee      	STD  Y+6,R30
0001eb 83ff      	STD  Y+6+1,R31
0001ec e015      	LDI  R17,LOW(5)
0001ed c00c      	RJMP _0x200003D
                 _0x200003C:
0001ee 35e8      	CPI  R30,LOW(0x58)
0001ef f411      	BRNE _0x200003F
0001f0 6008      	ORI  R16,LOW(8)
0001f1 c003      	RJMP _0x2000040
                 _0x200003F:
0001f2 37e8      	CPI  R30,LOW(0x78)
0001f3 f009      	BREQ PC+2
0001f4 c09e      	RJMP _0x2000071
                 _0x2000040:
0001f5 e5ee      	LDI  R30,LOW(_tbl16_G100*2)
0001f6 e0f0      	LDI  R31,HIGH(_tbl16_G100*2)
0001f7 83ee      	STD  Y+6,R30
0001f8 83ff      	STD  Y+6+1,R31
0001f9 e014      	LDI  R17,LOW(4)
                 _0x200003D:
0001fa ff02      	SBRS R16,2
0001fb c015      	RJMP _0x2000042
0001fc d1fb      	RCALL SUBOPT_0xC
0001fd 89a8      	LDD  R26,Y+16
0001fe 89b9      	LDD  R27,Y+16+1
0001ff 9614      	ADIW R26,4
000200 91ed      	LD   R30,X+
000201 91fd      	LD   R31,X+
000202 87ea      	STD  Y+10,R30
000203 87fb      	STD  Y+10+1,R31
000204 85ab      	LDD  R26,Y+11
000205 23aa      	TST  R26
000206 f422      	BRPL _0x2000043
000207 d21f      	RCALL __ANEGW1
000208 87ea      	STD  Y+10,R30
000209 87fb      	STD  Y+10+1,R31
00020a e24d      	LDI  R20,LOW(45)
                 _0x2000043:
00020b 3040      	CPI  R20,0
00020c f011      	BREQ _0x2000044
00020d 5f1f      	SUBI R17,-LOW(1)
00020e c001      	RJMP _0x2000045
                 _0x2000044:
00020f 7f0b      	ANDI R16,LOW(251)
                 _0x2000045:
000210 c006      	RJMP _0x2000046
                 _0x2000042:
000211 d1e6      	RCALL SUBOPT_0xC
000212 89a8      	LDD  R26,Y+16
000213 89b9      	LDD  R27,Y+16+1
000214 d1d1      	RCALL SUBOPT_0x9
000215 87ea      	STD  Y+10,R30
000216 87fb      	STD  Y+10+1,R31
                 _0x2000046:
                 _0x2000036:
000217 fd00      	SBRC R16,0
000218 c010      	RJMP _0x2000047
                 _0x2000048:
000219 1715      	CP   R17,R21
00021a f470      	BRSH _0x200004A
00021b ff07      	SBRS R16,7
00021c c008      	RJMP _0x200004B
00021d ff02      	SBRS R16,2
00021e c004      	RJMP _0x200004C
00021f 7f0b      	ANDI R16,LOW(251)
000220 2f24      	MOV  R18,R20
000221 5011      	SUBI R17,LOW(1)
000222 c001      	RJMP _0x200004D
                 _0x200004C:
000223 e320      	LDI  R18,LOW(48)
                 _0x200004D:
000224 c001      	RJMP _0x200004E
                 _0x200004B:
000225 e220      	LDI  R18,LOW(32)
                 _0x200004E:
000226 d1ca      	RCALL SUBOPT_0xB
000227 5051      	SUBI R21,LOW(1)
000228 cff0      	RJMP _0x2000048
                 _0x200004A:
                 _0x2000047:
000229 2f31      	MOV  R19,R17
00022a ff01      	SBRS R16,1
00022b c016      	RJMP _0x200004F
                 _0x2000050:
00022c 3030      	CPI  R19,0
00022d f099      	BREQ _0x2000052
00022e ff03      	SBRS R16,3
00022f c006      	RJMP _0x2000053
000230 81ee      	LDD  R30,Y+6
000231 81ff      	LDD  R31,Y+6+1
000232 9125      	LPM  R18,Z+
000233 83ee      	STD  Y+6,R30
000234 83ff      	STD  Y+6+1,R31
000235 c005      	RJMP _0x2000054
                 _0x2000053:
000236 81ae      	LDD  R26,Y+6
000237 81bf      	LDD  R27,Y+6+1
000238 912d      	LD   R18,X+
000239 83ae      	STD  Y+6,R26
00023a 83bf      	STD  Y+6+1,R27
                 _0x2000054:
00023b d1b5      	RCALL SUBOPT_0xB
00023c 3050      	CPI  R21,0
00023d f009      	BREQ _0x2000055
00023e 5051      	SUBI R21,LOW(1)
                 _0x2000055:
00023f 5031      	SUBI R19,LOW(1)
000240 cfeb      	RJMP _0x2000050
                 _0x2000052:
000241 c048      	RJMP _0x2000056
                 _0x200004F:
                 _0x2000058:
000242 e320      	LDI  R18,LOW(48)
000243 81ee      	LDD  R30,Y+6
000244 81ff      	LDD  R31,Y+6+1
000245 d1e5      	RCALL __GETW1PF
000246 87e8      	STD  Y+8,R30
000247 87f9      	STD  Y+8+1,R31
000248 81ee      	LDD  R30,Y+6
000249 81ff      	LDD  R31,Y+6+1
00024a 9632      	ADIW R30,2
00024b 83ee      	STD  Y+6,R30
00024c 83ff      	STD  Y+6+1,R31
                 _0x200005A:
00024d 85e8      	LDD  R30,Y+8
00024e 85f9      	LDD  R31,Y+8+1
00024f 85aa      	LDD  R26,Y+10
000250 85bb      	LDD  R27,Y+10+1
000251 17ae      	CP   R26,R30
000252 07bf      	CPC  R27,R31
000253 f050      	BRLO _0x200005C
000254 5f2f      	SUBI R18,-LOW(1)
000255 85a8      	LDD  R26,Y+8
000256 85b9      	LDD  R27,Y+8+1
000257 85ea      	LDD  R30,Y+10
000258 85fb      	LDD  R31,Y+10+1
000259 1bea      	SUB  R30,R26
00025a 0bfb      	SBC  R31,R27
00025b 87ea      	STD  Y+10,R30
00025c 87fb      	STD  Y+10+1,R31
00025d cfef      	RJMP _0x200005A
                 _0x200005C:
00025e 332a      	CPI  R18,58
00025f f028      	BRLO _0x200005D
000260 ff03      	SBRS R16,3
000261 c002      	RJMP _0x200005E
000262 5f29      	SUBI R18,-LOW(7)
000263 c001      	RJMP _0x200005F
                 _0x200005E:
000264 5d29      	SUBI R18,-LOW(39)
                 _0x200005F:
                 _0x200005D:
000265 fd04      	SBRC R16,4
000266 c019      	RJMP _0x2000061
000267 3321      	CPI  R18,49
000268 f420      	BRSH _0x2000063
000269 85a8      	LDD  R26,Y+8
00026a 85b9      	LDD  R27,Y+8+1
00026b 9711      	SBIW R26,1
00026c f409      	BRNE _0x2000062
                 _0x2000063:
00026d c009      	RJMP _0x20000CD
                 _0x2000062:
00026e 1753      	CP   R21,R19
00026f f010      	BRLO _0x2000067
000270 ff00      	SBRS R16,0
000271 c001      	RJMP _0x2000068
                 _0x2000067:
000272 c011      	RJMP _0x2000066
                 _0x2000068:
000273 e220      	LDI  R18,LOW(32)
000274 ff07      	SBRS R16,7
000275 c00a      	RJMP _0x2000069
000276 e320      	LDI  R18,LOW(48)
                 _0x20000CD:
000277 6100      	ORI  R16,LOW(16)
000278 ff02      	SBRS R16,2
000279 c006      	RJMP _0x200006A
00027a 7f0b      	ANDI R16,LOW(251)
00027b 934a      	ST   -Y,R20
00027c d181      	RCALL SUBOPT_0xD
00027d 3050      	CPI  R21,0
00027e f009      	BREQ _0x200006B
00027f 5051      	SUBI R21,LOW(1)
                 _0x200006B:
                 _0x200006A:
                 _0x2000069:
                 _0x2000061:
000280 d170      	RCALL SUBOPT_0xB
000281 3050      	CPI  R21,0
000282 f009      	BREQ _0x200006C
000283 5051      	SUBI R21,LOW(1)
                 _0x200006C:
                 _0x2000066:
000284 5031      	SUBI R19,LOW(1)
000285 85a8      	LDD  R26,Y+8
000286 85b9      	LDD  R27,Y+8+1
000287 9712      	SBIW R26,2
000288 f008      	BRLO _0x2000059
000289 cfb8      	RJMP _0x2000058
                 _0x2000059:
                 _0x2000056:
00028a ff00      	SBRS R16,0
00028b c007      	RJMP _0x200006D
                 _0x200006E:
00028c 3050      	CPI  R21,0
00028d f029      	BREQ _0x2000070
00028e 5051      	SUBI R21,LOW(1)
00028f e2e0      	LDI  R30,LOW(32)
000290 93ea      	ST   -Y,R30
000291 d16c      	RCALL SUBOPT_0xD
000292 cff9      	RJMP _0x200006E
                 _0x2000070:
                 _0x200006D:
                 _0x2000071:
                 _0x2000030:
                 _0x20000CC:
000293 e010      	LDI  R17,LOW(0)
                 _0x200001B:
000294 ceed      	RJMP _0x2000016
                 _0x2000018:
000295 85ac      	LDD  R26,Y+12
000296 85bd      	LDD  R27,Y+12+1
000297 91ed      	LD   R30,X+
000298 91fd      	LD   R31,X+
000299 d186      	RCALL __LOADLOCR6
00029a 9664      	ADIW R28,20
00029b 9508      	RET
                 ; .FEND
                 _sprintf:
                 ; .FSTART _sprintf
00029c 92ff      	PUSH R15
00029d 2ef8      	MOV  R15,R24
00029e 9726      	SBIW R28,6
00029f d179      	RCALL __SAVELOCR6
0002a0 01fe      	MOVW R30,R28
                +
0002a1 2400     +CLR R0
0002a2 0def     +ADD R30 , R15
0002a3 1df0     +ADC R31 , R0
                 	__ADDW1R15
                +
0002a4 8546     +LDD R20 , Z + 14
0002a5 8557     +LDD R21 , Z + 14 + 1
                 	__GETWRZ 20,21,14
0002a6 2e04      	MOV  R0,R20
0002a7 2a05      	OR   R0,R21
0002a8 f419      	BRNE _0x2000072
0002a9 efef      	LDI  R30,LOW(65535)
0002aa efff      	LDI  R31,HIGH(65535)
0002ab c023      	RJMP _0x2080002
                 _0x2000072:
0002ac 01de      	MOVW R26,R28
0002ad 9618      	ADIW R26,8
                +
0002ae 2400     +CLR R0
0002af 0daf     +ADD R26 , R15
0002b0 1db0     +ADC R27 , R0
                 	__ADDW2R15
0002b1 018d      	MOVW R16,R26
                +
0002b2 8748     +STD Y + 8 , R20
0002b3 8759     +STD Y + 8 + 1 , R21
                 	__PUTWSR 20,21,8
0002b4 e0e0      	LDI  R30,LOW(0)
0002b5 87ea      	STD  Y+10,R30
0002b6 87eb      	STD  Y+10+1,R30
0002b7 01de      	MOVW R26,R28
0002b8 961c      	ADIW R26,12
                +
0002b9 2400     +CLR R0
0002ba 0daf     +ADD R26 , R15
0002bb 1db0     +ADC R27 , R0
                 	__ADDW2R15
0002bc 91ed      	LD   R30,X+
0002bd 91fd      	LD   R31,X+
0002be 93fa      	ST   -Y,R31
0002bf 93ea      	ST   -Y,R30
0002c0 931a      	ST   -Y,R17
0002c1 930a      	ST   -Y,R16
0002c2 e4e9      	LDI  R30,LOW(_put_buff_G100)
0002c3 e0f1      	LDI  R31,HIGH(_put_buff_G100)
0002c4 93fa      	ST   -Y,R31
0002c5 93ea      	ST   -Y,R30
0002c6 01de      	MOVW R26,R28
0002c7 961c      	ADIW R26,12
0002c8 deae      	RCALL __print_G100
0002c9 019f      	MOVW R18,R30
0002ca 85a8      	LDD  R26,Y+8
0002cb 85b9      	LDD  R27,Y+8+1
0002cc e0e0      	LDI  R30,LOW(0)
0002cd 93ec      	ST   X,R30
0002ce 01f9      	MOVW R30,R18
                 _0x2080002:
0002cf d150      	RCALL __LOADLOCR6
0002d0 962c      	ADIW R28,12
0002d1 90ff      	POP  R15
0002d2 9508      	RET
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_write_nibble_G101:
                 ; .FSTART __lcd_write_nibble_G101
0002d3 931a      	ST   -Y,R17
0002d4 2f1a      	MOV  R17,R26
0002d5 ff14      	SBRS R17,4
0002d6 c002      	RJMP _0x2020004
0002d7 9ac2      	SBI  0x18,2
0002d8 c001      	RJMP _0x2020005
                 _0x2020004:
0002d9 98c2      	CBI  0x18,2
                 _0x2020005:
0002da ff15      	SBRS R17,5
0002db c002      	RJMP _0x2020006
0002dc 9ac5      	SBI  0x18,5
0002dd c001      	RJMP _0x2020007
                 _0x2020006:
0002de 98c5      	CBI  0x18,5
                 _0x2020007:
0002df ff16      	SBRS R17,6
0002e0 c002      	RJMP _0x2020008
0002e1 9ac6      	SBI  0x18,6
0002e2 c001      	RJMP _0x2020009
                 _0x2020008:
0002e3 98c6      	CBI  0x18,6
                 _0x2020009:
0002e4 ff17      	SBRS R17,7
0002e5 c002      	RJMP _0x202000A
0002e6 9ac7      	SBI  0x18,7
0002e7 c001      	RJMP _0x202000B
                 _0x202000A:
0002e8 98c7      	CBI  0x18,7
                 _0x202000B:
                +
0002e9 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
0002ea 958a     +DEC R24
0002eb f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
0002ec 9ac1      	SBI  0x18,1
                +
0002ed e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
0002ee 958a     +DEC R24
0002ef f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
0002f0 98c1      	CBI  0x18,1
                +
0002f1 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
0002f2 958a     +DEC R24
0002f3 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
0002f4 c086      	RJMP _0x2080001
                 ; .FEND
                 __lcd_write_data:
                 ; .FSTART __lcd_write_data
0002f5 93aa      	ST   -Y,R26
0002f6 81a8      	LD   R26,Y
0002f7 dfdb      	RCALL __lcd_write_nibble_G101
0002f8 81e8          ld    r30,y
0002f9 95e2          swap  r30
0002fa 83e8          st    y,r30
0002fb 81a8      	LD   R26,Y
0002fc dfd6      	RCALL __lcd_write_nibble_G101
                +
0002fd e885     +LDI R24 , LOW ( 133 )
                +__DELAY_USB_LOOP :
0002fe 958a     +DEC R24
0002ff f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 133
000300 9621      	ADIW R28,1
000301 9508      	RET
                 ; .FEND
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
000302 931a      	ST   -Y,R17
000303 930a      	ST   -Y,R16
000304 2f1a      	MOV  R17,R26
000305 810a      	LDD  R16,Y+2
000306 2fe1      	MOV  R30,R17
000307 e0f0      	LDI  R31,0
000308 58eb      	SUBI R30,LOW(-__base_y_G101)
000309 4ffd      	SBCI R31,HIGH(-__base_y_G101)
00030a 81e0      	LD   R30,Z
00030b 0fe0      	ADD  R30,R16
00030c 2fae      	MOV  R26,R30
00030d dfe7      	RCALL __lcd_write_data
00030e 9300 0279 	STS  __lcd_x,R16
000310 9310 027a 	STS  __lcd_y,R17
000312 8119      	LDD  R17,Y+1
000313 8108      	LDD  R16,Y+0
000314 9623      	ADIW R28,3
000315 9508      	RET
                 ; .FEND
                 _lcd_clear:
                 ; .FSTART _lcd_clear
000316 e0a2      	LDI  R26,LOW(2)
000317 d0f6      	RCALL SUBOPT_0xF
000318 e0ac      	LDI  R26,LOW(12)
000319 dfdb      	RCALL __lcd_write_data
00031a e0a1      	LDI  R26,LOW(1)
00031b d0f2      	RCALL SUBOPT_0xF
00031c e0e0      	LDI  R30,LOW(0)
00031d 93e0 027a 	STS  __lcd_y,R30
00031f 93e0 0279 	STS  __lcd_x,R30
000321 9508      	RET
                 ; .FEND
                 _lcd_putchar:
                 ; .FSTART _lcd_putchar
000322 931a      	ST   -Y,R17
000323 2f1a      	MOV  R17,R26
000324 301a      	CPI  R17,10
000325 f031      	BREQ _0x2020011
000326 91e0 027b 	LDS  R30,__lcd_maxx
000328 91a0 0279 	LDS  R26,__lcd_x
00032a 17ae      	CP   R26,R30
00032b f058      	BRLO _0x2020010
                 _0x2020011:
00032c e0e0      	LDI  R30,LOW(0)
00032d 93ea      	ST   -Y,R30
00032e 91a0 027a 	LDS  R26,__lcd_y
000330 5faf      	SUBI R26,-LOW(1)
000331 93a0 027a 	STS  __lcd_y,R26
000333 dfce      	RCALL _lcd_gotoxy
000334 301a      	CPI  R17,10
000335 f409      	BRNE _0x2020013
000336 c044      	RJMP _0x2080001
                 _0x2020013:
                 _0x2020010:
000337 91e0 0279 	LDS  R30,__lcd_x
000339 5fef      	SUBI R30,-LOW(1)
00033a 93e0 0279 	STS  __lcd_x,R30
00033c 9ac0      	SBI  0x18,0
00033d 2fa1      	MOV  R26,R17
00033e dfb6      	RCALL __lcd_write_data
00033f 98c0      	CBI  0x18,0
000340 c03a      	RJMP _0x2080001
                 ; .FEND
                 _lcd_puts:
                 ; .FSTART _lcd_puts
000341 d0d9      	RCALL __SAVELOCR4
000342 019d      	MOVW R18,R26
                 _0x2020014:
000343 01d9      	MOVW R26,R18
                +
000344 5f2f     +SUBI R18 , LOW ( - 1 )
000345 4f3f     +SBCI R19 , HIGH ( - 1 )
                 	__ADDWRN 18,19,1
000346 91ec      	LD   R30,X
000347 2f1e      	MOV  R17,R30
000348 30e0      	CPI  R30,0
000349 f019      	BREQ _0x2020016
00034a 2fa1      	MOV  R26,R17
00034b dfd6      	RCALL _lcd_putchar
00034c cff6      	RJMP _0x2020014
                 _0x2020016:
00034d d0d4      	RCALL __LOADLOCR4
00034e 9624      	ADIW R28,4
00034f 9508      	RET
                 ; .FEND
                 _lcd_init:
                 ; .FSTART _lcd_init
000350 931a      	ST   -Y,R17
000351 2f1a      	MOV  R17,R26
000352 9aba      	SBI  0x17,2
000353 9abd      	SBI  0x17,5
000354 9abe      	SBI  0x17,6
000355 9abf      	SBI  0x17,7
000356 9ab9      	SBI  0x17,1
000357 9ab8      	SBI  0x17,0
000358 9aa2      	SBI  0x14,2
000359 98c1      	CBI  0x18,1
00035a 98c0      	CBI  0x18,0
00035b 98aa      	CBI  0x15,2
00035c 9310 027b 	STS  __lcd_maxx,R17
00035e 2fe1      	MOV  R30,R17
00035f 58e0      	SUBI R30,-LOW(128)
                +
000360 93e0 0277+STS __base_y_G101 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G101,2
000362 2fe1      	MOV  R30,R17
000363 54e0      	SUBI R30,-LOW(192)
                +
000364 93e0 0278+STS __base_y_G101 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G101,3
000366 e1a4      	LDI  R26,LOW(20)
000367 e0b0      	LDI  R27,0
000368 d0cb      	RCALL _delay_ms
000369 d0a8      	RCALL SUBOPT_0x10
00036a d0a7      	RCALL SUBOPT_0x10
00036b d0a6      	RCALL SUBOPT_0x10
00036c e2a0      	LDI  R26,LOW(32)
00036d df65      	RCALL __lcd_write_nibble_G101
                +
00036e ec88     +LDI R24 , LOW ( 200 )
00036f e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
000370 9701     +SBIW R24 , 1
000371 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
000372 e2a8      	LDI  R26,LOW(40)
000373 df81      	RCALL __lcd_write_data
000374 e0a4      	LDI  R26,LOW(4)
000375 df7f      	RCALL __lcd_write_data
000376 e8a5      	LDI  R26,LOW(133)
000377 df7d      	RCALL __lcd_write_data
000378 e0a6      	LDI  R26,LOW(6)
000379 df7b      	RCALL __lcd_write_data
00037a df9b      	RCALL _lcd_clear
                 _0x2080001:
00037b 9119      	LD   R17,Y+
00037c 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 
                 	.CSEG
                 _strlen:
                 ; .FSTART _strlen
00037d 93ba      	ST   -Y,R27
00037e 93aa      	ST   -Y,R26
00037f 91a9          ld   r26,y+
000380 91b9          ld   r27,y+
000381 27ee          clr  r30
000382 27ff          clr  r31
                 strlen0:
000383 916d          ld   r22,x+
000384 2366          tst  r22
000385 f011          breq strlen1
000386 9631          adiw r30,1
000387 cffb          rjmp strlen0
                 strlen1:
000388 9508          ret
                 ; .FEND
                 _strlenf:
                 ; .FSTART _strlenf
000389 93ba      	ST   -Y,R27
00038a 93aa      	ST   -Y,R26
00038b 27aa          clr  r26
00038c 27bb          clr  r27
00038d 91e9          ld   r30,y+
00038e 91f9          ld   r31,y+
                 strlenf0:
00038f 9005      	lpm  r0,z+
000390 2000          tst  r0
000391 f011          breq strlenf1
000392 9611          adiw r26,1
000393 cffb          rjmp strlenf0
                 strlenf1:
000394 01fd          movw r30,r26
000395 9508          ret
                 ; .FEND
                 
                 	.DSEG
                 _str:
000260           	.BYTE 0x14
                 _keySetOldFlag:
000274           	.BYTE 0x1
                 __base_y_G101:
000275           	.BYTE 0x4
                 __lcd_x:
000279           	.BYTE 0x1
                 __lcd_y:
00027a           	.BYTE 0x1
                 __lcd_maxx:
00027b           	.BYTE 0x1
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 10 TIMES, CODE SIZE REDUCTION:25 WORDS
                 SUBOPT_0x0:
000396 e6e0      	LDI  R30,LOW(_str)
000397 e0f2      	LDI  R31,HIGH(_str)
000398 93fa      	ST   -Y,R31
000399 93ea      	ST   -Y,R30
00039a 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:55 WORDS
                 SUBOPT_0x1:
                +
00039b e7e0     +LDI R30 , LOW ( 2 * _0x0 + ( 0 ) )
00039c e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 0 ) )
                 	__POINTW1FN _0x0,0
00039d 93fa      	ST   -Y,R31
00039e 93ea      	ST   -Y,R30
00039f 2de4      	MOV  R30,R4
0003a0 27ff      	CLR  R31
0003a1 2766      	CLR  R22
0003a2 2777      	CLR  R23
0003a3 d08b      	RCALL __PUTPARD1
0003a4 e084      	LDI  R24,4
0003a5 def6      	RCALL _sprintf
0003a6 9628      	ADIW R28,8
0003a7 e0e0      	LDI  R30,LOW(0)
0003a8 93ea      	ST   -Y,R30
0003a9 93ea      	ST   -Y,R30
0003aa e6a0      	LDI  R26,LOW(_str)
0003ab e0b2      	LDI  R27,HIGH(_str)
0003ac dd8b      	RCALL _Disp
0003ad cfe8      	RJMP SUBOPT_0x0
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:52 WORDS
                 SUBOPT_0x2:
                +
0003ae e7e9     +LDI R30 , LOW ( 2 * _0x0 + ( 9 ) )
0003af e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 9 ) )
                 	__POINTW1FN _0x0,9
0003b0 93fa      	ST   -Y,R31
0003b1 93ea      	ST   -Y,R30
0003b2 2de7      	MOV  R30,R7
0003b3 27ff      	CLR  R31
0003b4 2766      	CLR  R22
0003b5 2777      	CLR  R23
0003b6 d078      	RCALL __PUTPARD1
0003b7 e084      	LDI  R24,4
0003b8 dee3      	RCALL _sprintf
0003b9 9628      	ADIW R28,8
0003ba e0e0      	LDI  R30,LOW(0)
0003bb 93ea      	ST   -Y,R30
0003bc e0e1      	LDI  R30,LOW(1)
0003bd 93ea      	ST   -Y,R30
0003be e6a0      	LDI  R26,LOW(_str)
0003bf e0b2      	LDI  R27,HIGH(_str)
0003c0 cd77      	RJMP _Disp
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x3:
0003c1 01f5      	MOVW R30,R10
0003c2 9631      	ADIW R30,1
0003c3 015f      	MOVW R10,R30
0003c4 e0e3      	LDI  R30,LOW(3)
0003c5 e0f0      	LDI  R31,HIGH(3)
0003c6 16ae      	CP   R10,R30
0003c7 06bf      	CPC  R11,R31
0003c8 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x4:
0003c9 27ff      	CLR  R31
0003ca 2766      	CLR  R22
0003cb 2777      	CLR  R23
0003cc d062      	RCALL __PUTPARD1
0003cd e084      	LDI  R24,4
0003ce decd      	RCALL _sprintf
0003cf 9628      	ADIW R28,8
0003d0 e0e0      	LDI  R30,LOW(0)
0003d1 93ea      	ST   -Y,R30
0003d2 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x5:
0003d3 93ea      	ST   -Y,R30
0003d4 e6a0      	LDI  R26,LOW(_str)
0003d5 e0b2      	LDI  R27,HIGH(_str)
0003d6 cd61      	RJMP _Disp
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x6:
0003d7 e0e6      	LDI  R30,LOW(6)
0003d8 e0f0      	LDI  R31,HIGH(6)
0003d9 16ae      	CP   R10,R30
0003da 06bf      	CPC  R11,R31
0003db 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x7:
0003dc d03e      	RCALL __SAVELOCR4
0003dd 018d      	MOVW R16,R26
0003de 813c      	LDD  R19,Y+4
0003df 812d      	LDD  R18,Y+5
0003e0 932a      	ST   -Y,R18
0003e1 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x8:
0003e2 931a      	ST   -Y,R17
0003e3 930a      	ST   -Y,R16
0003e4 018d      	MOVW R16,R26
0003e5 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x9:
0003e6 9614      	ADIW R26,4
                +
0003e7 91ed     +LD R30 , X +
0003e8 91fc     +LD R31 , X
0003e9 9711     +SBIW R26 , 1
                 	__GETW1P
0003ea 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0xA:
0003eb 91ed      	LD   R30,X+
0003ec 91fd      	LD   R31,X+
0003ed 9631      	ADIW R30,1
0003ee 93fe      	ST   -X,R31
0003ef 93ee      	ST   -X,R30
0003f0 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:18 WORDS
                 SUBOPT_0xB:
0003f1 932a      	ST   -Y,R18
0003f2 85ad      	LDD  R26,Y+13
0003f3 85be      	LDD  R27,Y+13+1
0003f4 85ef      	LDD  R30,Y+15
0003f5 89f8      	LDD  R31,Y+15+1
0003f6 9509      	ICALL
0003f7 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:14 WORDS
                 SUBOPT_0xC:
0003f8 89e8      	LDD  R30,Y+16
0003f9 89f9      	LDD  R31,Y+16+1
0003fa 9734      	SBIW R30,4
0003fb 8be8      	STD  Y+16,R30
0003fc 8bf9      	STD  Y+16+1,R31
0003fd 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0xD:
0003fe 85ad      	LDD  R26,Y+13
0003ff 85be      	LDD  R27,Y+13+1
000400 85ef      	LDD  R30,Y+15
000401 89f8      	LDD  R31,Y+15+1
000402 9509      	ICALL
000403 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0xE:
000404 89a8      	LDD  R26,Y+16
000405 89b9      	LDD  R27,Y+16+1
000406 9614      	ADIW R26,4
000407 91ed      	LD   R30,X+
000408 91fd      	LD   R31,X+
000409 83ee      	STD  Y+6,R30
00040a 83ff      	STD  Y+6+1,R31
00040b 81ae      	LDD  R26,Y+6
00040c 81bf      	LDD  R27,Y+6+1
00040d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xF:
00040e dee6      	RCALL __lcd_write_data
00040f e0a3      	LDI  R26,LOW(3)
000410 e0b0      	LDI  R27,0
000411 c022      	RJMP _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:8 WORDS
                 SUBOPT_0x10:
000412 e3a0      	LDI  R26,LOW(48)
000413 debf      	RCALL __lcd_write_nibble_G101
                +
000414 ec88     +LDI R24 , LOW ( 200 )
000415 e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
000416 9701     +SBIW R24 , 1
000417 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
000418 9508      	RET
                 
                 ;RUNTIME LIBRARY
                 
                 	.CSEG
                 __SAVELOCR6:
000419 935a      	ST   -Y,R21
                 __SAVELOCR5:
00041a 934a      	ST   -Y,R20
                 __SAVELOCR4:
00041b 933a      	ST   -Y,R19
                 __SAVELOCR3:
00041c 932a      	ST   -Y,R18
                 __SAVELOCR2:
00041d 931a      	ST   -Y,R17
00041e 930a      	ST   -Y,R16
00041f 9508      	RET
                 
                 __LOADLOCR6:
000420 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
000421 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
000422 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
000423 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
000424 8119      	LDD  R17,Y+1
000425 8108      	LD   R16,Y
000426 9508      	RET
                 
                 __ANEGW1:
000427 95f1      	NEG  R31
000428 95e1      	NEG  R30
000429 40f0      	SBCI R31,0
00042a 9508      	RET
                 
                 __GETW1PF:
00042b 9005      	LPM  R0,Z+
00042c 91f4      	LPM  R31,Z
00042d 2de0      	MOV  R30,R0
00042e 9508      	RET
                 
                 __PUTPARD1:
00042f 937a      	ST   -Y,R23
000430 936a      	ST   -Y,R22
000431 93fa      	ST   -Y,R31
000432 93ea      	ST   -Y,R30
000433 9508      	RET
                 
                 _delay_ms:
000434 9610      	adiw r26,0
000435 f039      	breq __delay_ms1
                 __delay_ms0:
000436 95a8      	wdr
                +
000437 ed80     +LDI R24 , LOW ( 0x7D0 )
000438 e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
000439 9701     +SBIW R24 , 1
00043a f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
00043b 9711      	sbiw r26,1
00043c f7c9      	brne __delay_ms0
                 __delay_ms1:
00043d 9508      	ret
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega32A register use summary:
r0 :  17 r1 :   1 r2 :   0 r3 :   0 r4 :   2 r5 :   1 r6 :   4 r7 :   2 
r8 :   0 r9 :   3 r10:   6 r11:   4 r12:   3 r13:   0 r14:   0 r15:   6 
r16:  43 r17:  49 r18:  40 r19:  12 r20:  12 r21:  22 r22:   8 r23:   4 
r24:  25 r25:   5 r26: 105 r27:  32 r28:  17 r29:   1 r30: 239 r31:  77 
x  :  31 y  : 158 z  :  17 
Registers used: 30 out of 35 (85.7%)

ATmega32A instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   3 add   :   5 
adiw  :  26 and   :   0 andi  :   6 asr   :   0 bclr  :   0 bld   :   0 
brbc  :   0 brbs  :   0 brcc  :   0 brcs  :   0 break :   0 breq  :  23 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   8 
brlt  :   0 brmi  :   1 brne  :  35 brpl  :   1 brsh  :   7 brtc  :   0 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 call  :   0 
cbi   :  10 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :  25 cls   :   0 clt   :   0 clv   :   0 clz   :   0 com   :   0 
cp    :   7 cpc   :   5 cpi   :  38 cpse  :   0 dec   :   5 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   2 ijmp  :   0 
in    :   2 inc   :   1 jmp   :  24 ld    :  31 ldd   :  63 ldi   : 126 
lds   :   5 lpm   :  14 lsl   :   0 lsr   :   0 mov   :  34 movw  :  28 
mul   :   1 muls  :   0 mulsu :   0 neg   :   2 nop   :   0 or    :   1 
ori   :   6 out   :  39 pop   :   1 push  :   1 rcall : 106 ret   :  38 
reti  :   0 rjmp  :  83 rol   :   0 ror   :   0 sbc   :   1 sbci  :   3 
sbi   :  14 sbic  :   0 sbis  :   0 sbiw  :  22 sbr   :   0 sbrc  :   2 
sbrs  :  14 sec   :   0 seh   :   0 sei   :   0 sen   :   0 ser   :   0 
ses   :   0 set   :   0 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  70 std   :  30 sts   :  10 sub   :   1 subi  :  19 swap  :   1 
tst   :   8 wdr   :   1 
Instructions used: 52 out of 116 (44.8%)

ATmega32A memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x00087c   2094     78   2172   32768   6.6%
[.dseg] 0x000060 0x00027c      0     28     28    2048   1.4%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 11 warnings
